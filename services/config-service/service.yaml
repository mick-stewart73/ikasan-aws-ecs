Description: >
  This is the configuration service used by Ikasan.

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  FileSystem:
    Description: The filesystem to mount
    Type: String

  SecurityGroup:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet::Id
    Description: Which subnet would you like to use for your first Mount Target?

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Which subnet would you like to use for your first Mount Target?

  DiscoveryService:
    Type: String
    Description: The container discovery service arn

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
#      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref PrivateSubnetOne
            - !Ref PrivateSubnetTwo
      TaskDefinition: !Ref TaskDefinition
      ServiceName: config-service
      LoadBalancers:
        - ContainerName: "config-service"
          ContainerPort: 8888
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !Ref DiscoveryService
          Port: 80

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: config-service
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: config-service
          MountPoints:
            - SourceVolume: "config"
              ContainerPath: "/config"
          Essential: true
          Image: hyness/spring-cloud-config-server
          Memory: 256
#          HealthCheck:
#            Command: [ "CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1" ]
          Environment:
            - Name: SPRING_CLOUD_CONFIG_SERVER_GIT_URI
              Value: 'https://github.com/andrzej-majewski/config-repo'
          PortMappings:
            - ContainerPort: 8888
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
      Volumes:
        - Name: config
          DockerVolumeConfiguration:
            Driver: local
            DriverOpts:
              type: nfs
              device: !Sub "${FileSystem}.efs.${AWS::Region}.amazonaws.com:/"
              o: !Sub "addr=${FileSystem}.efs.${AWS::Region}.amazonaws.com,nfsvers=4.0,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2"
            Labels:
              foo: ikasan-data
            Scope: task

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8888
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      TargetType: ip
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/actuator'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - '/actuator*'
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets"
                      ],
                    "Resource": "*"
                  }
                ]
            }
